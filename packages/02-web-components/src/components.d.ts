/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    /**
     * Button component for common interactions
     */
    interface N0fButton {
        /**
          * Disables the button
          * @default false
         */
        "disabled": boolean;
        /**
          * Button size
          * @default 'md'
         */
        "size": 'icon' | 'xs' | 'sm' | 'md' | 'lg';
        /**
          * The button type
          * @default 'button'
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * The button variant
          * @default 'primary'
         */
        "variant": 'primary' | 'secondary' | 'outline' | 'ghost' | 'link' | 'destructive';
    }
}
export interface N0fButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLN0fButtonElement;
}
declare global {
    interface HTMLN0fButtonElementEventMap {
        "n0fClick": MouseEvent;
    }
    /**
     * Button component for common interactions
     */
    interface HTMLN0fButtonElement extends Components.N0fButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLN0fButtonElementEventMap>(type: K, listener: (this: HTMLN0fButtonElement, ev: N0fButtonCustomEvent<HTMLN0fButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLN0fButtonElementEventMap>(type: K, listener: (this: HTMLN0fButtonElement, ev: N0fButtonCustomEvent<HTMLN0fButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLN0fButtonElement: {
        prototype: HTMLN0fButtonElement;
        new (): HTMLN0fButtonElement;
    };
    interface HTMLElementTagNameMap {
        "n0f-button": HTMLN0fButtonElement;
    }
}
declare namespace LocalJSX {
    /**
     * Button component for common interactions
     */
    interface N0fButton {
        /**
          * Disables the button
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Emitted when the button is clicked
         */
        "onN0fClick"?: (event: N0fButtonCustomEvent<MouseEvent>) => void;
        /**
          * Button size
          * @default 'md'
         */
        "size"?: 'icon' | 'xs' | 'sm' | 'md' | 'lg';
        /**
          * The button type
          * @default 'button'
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * The button variant
          * @default 'primary'
         */
        "variant"?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'link' | 'destructive';
    }
    interface IntrinsicElements {
        "n0f-button": N0fButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * Button component for common interactions
             */
            "n0f-button": LocalJSX.N0fButton & JSXBase.HTMLAttributes<HTMLN0fButtonElement>;
        }
    }
}
